import { PreferenceTransformerType } from './updatePreferences';
/**
 * Factory function to create a hook that can be used to access and update the user preferences of your app
 *
 * @param version the version of the preferences object, this should be incremented whenever the structure of the preferences object changes
 * @param transformers optional array of functions that is used to update the preferences object before it is returned
 * @returns hook to be used to fetch and update the user preferences throughout your applicaiton
 * @example
 * interface MyAppUserPreferences {
 *   example: string;
 * }
 * const PREFERENCES_VERSION = 1;
 * const transformers = [ (previous: VersionedPreference) => { //UpdateVersion } ];
 * export const usePreference = userPreferenceHookFactory<MyAppUserPreferences>(PREFERENCES_VERSION, transformers);
 * const {preference: example, setPreference: setExample, clearPreference: clearExample, fallbackValueUsed} = usePreference<string>('example', 'default');
 */
export declare const userPreferenceHookFactory: <T extends object>(version?: number, transformers?: PreferenceTransformerType[]) => <P extends keyof T>(preferenceName: P, defaultValue: T[P]) => {
    preference: T[P];
    setPreference: (value: T[P]) => void;
    clearPreference: () => void;
    fallbackValueUsed: boolean;
};
