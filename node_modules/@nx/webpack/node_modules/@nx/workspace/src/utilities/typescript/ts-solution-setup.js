"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isUsingTsSolutionSetup = isUsingTsSolutionSetup;
const devkit_1 = require("@nx/devkit");
const tree_1 = require("nx/src/generators/tree");
function isUsingPackageManagerWorkspaces(tree) {
    return isWorkspacesEnabled(tree);
}
function isWorkspacesEnabled(tree) {
    const packageManager = (0, devkit_1.detectPackageManager)(tree.root);
    if (packageManager === 'pnpm') {
        return tree.exists('pnpm-workspace.yaml');
    }
    // yarn and npm both use the same 'workspaces' property in package.json
    if (tree.exists('package.json')) {
        const packageJson = (0, devkit_1.readJson)(tree, 'package.json');
        return !!packageJson?.workspaces;
    }
    return false;
}
function isWorkspaceSetupWithTsSolution(tree) {
    if (!tree.exists('tsconfig.base.json') || !tree.exists('tsconfig.json')) {
        return false;
    }
    const tsconfigJson = (0, devkit_1.readJson)(tree, 'tsconfig.json');
    if (tsconfigJson.extends !== './tsconfig.base.json') {
        return false;
    }
    /**
     * New setup:
     * - `files` is defined and set to an empty array
     * - `references` is defined and set to an empty array
     * - `include` is not defined or is set to an empty array
     */
    if (!tsconfigJson.files ||
        tsconfigJson.files.length > 0 ||
        !tsconfigJson.references ||
        !!tsconfigJson.include?.length) {
        return false;
    }
    const baseTsconfigJson = (0, devkit_1.readJson)(tree, 'tsconfig.base.json');
    if (!baseTsconfigJson.compilerOptions ||
        !baseTsconfigJson.compilerOptions.composite ||
        !baseTsconfigJson.compilerOptions.declaration) {
        return false;
    }
    const { compilerOptions, ...rest } = baseTsconfigJson;
    if (Object.keys(rest).length > 0) {
        return false;
    }
    return true;
}
function isUsingTsSolutionSetup(tree) {
    tree ??= new tree_1.FsTree(devkit_1.workspaceRoot, false);
    return (isUsingPackageManagerWorkspaces(tree) &&
        isWorkspaceSetupWithTsSolution(tree));
}
