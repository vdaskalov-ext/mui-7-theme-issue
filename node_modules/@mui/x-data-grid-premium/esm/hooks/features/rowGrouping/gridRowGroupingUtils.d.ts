import { RefObject } from '@mui/x-internals/types';
import { GridRowTreeConfig, GridFilterState, GridFilterModel, GridRowModel, GridColDef, GridKeyValue, GridDataSource } from '@mui/x-data-grid-pro';
import { GridAggregatedFilterItemApplier, GridColumnRawLookup, GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD, getRowGroupingCriteriaFromGroupingField, isGroupingColumn } from '@mui/x-data-grid-pro/internals';
import { DataGridPremiumProcessedProps } from "../../../models/dataGridPremiumProps.js";
import { GridGroupingRule, GridGroupingRules, GridRowGroupingModel } from "./gridRowGroupingInterfaces.js";
import { GridStatePremium } from "../../../models/gridStatePremium.js";
import { GridPrivateApiPremium } from "../../../models/gridApiPremium.js";
export { GRID_ROW_GROUPING_SINGLE_GROUPING_FIELD, getRowGroupingCriteriaFromGroupingField, isGroupingColumn };
export declare enum RowGroupingStrategy {
  Default = "grouping-columns",
  DataSource = "grouping-columns-data-source",
}
export declare const getRowGroupingFieldFromGroupingCriteria: (groupingCriteria: string | null) => string;
interface FilterRowTreeFromTreeDataParams {
  rowTree: GridRowTreeConfig;
  isRowMatchingFilters: GridAggregatedFilterItemApplier | null;
  filterModel: GridFilterModel;
  apiRef: RefObject<GridPrivateApiPremium>;
}
/**
 * A leaf is visible if it passed the filter
 * A group is visible if all the following criteria are met:
 * - One of its children is passing the filter
 * - It is passing the filter
 */
export declare const filterRowTreeFromGroupingColumns: (params: FilterRowTreeFromTreeDataParams) => Omit<GridFilterState, "filterModel">;
export declare const getColDefOverrides: (groupingColDefProp: DataGridPremiumProcessedProps["groupingColDef"], fields: string[], strategy?: RowGroupingStrategy) => import("@mui/x-data-grid-pro").GridGroupingColDefOverride<any> | null | undefined;
export declare const mergeStateWithRowGroupingModel: (rowGroupingModel: GridRowGroupingModel) => (state: GridStatePremium) => GridStatePremium;
export declare const setStrategyAvailability: (privateApiRef: RefObject<GridPrivateApiPremium>, disableRowGrouping: boolean, dataSource?: GridDataSource) => void;
export declare const getCellGroupingCriteria: ({
  row,
  colDef,
  groupingRule,
  apiRef
}: {
  row: GridRowModel;
  colDef: GridColDef;
  groupingRule: GridGroupingRule;
  apiRef: RefObject<GridPrivateApiPremium>;
}) => {
  key: GridKeyValue | null | undefined;
  field: string;
};
export declare const getGroupingRules: ({
  sanitizedRowGroupingModel,
  columnsLookup
}: {
  sanitizedRowGroupingModel: GridRowGroupingModel;
  columnsLookup: GridColumnRawLookup;
}) => GridGroupingRules;
/**
 * Compares two sets of grouping rules to determine if they are equal or not.
 */
export declare const areGroupingRulesEqual: (newValue: GridGroupingRules, previousValue: GridGroupingRules) => boolean;