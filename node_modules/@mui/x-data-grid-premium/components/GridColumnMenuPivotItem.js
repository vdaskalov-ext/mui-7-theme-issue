"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GridColumnMenuPivotItem = GridColumnMenuPivotItem;
var React = _interopRequireWildcard(require("react"));
var _xDataGridPro = require("@mui/x-data-grid-pro");
var _internals = require("@mui/x-data-grid-pro/internals");
var _useGridRootProps = require("../hooks/utils/useGridRootProps");
var _useGridApiContext = require("../hooks/utils/useGridApiContext");
var _jsxRuntime = require("react/jsx-runtime");
function GridColumnMenuPivotItem(props) {
  const {
    onClick
  } = props;
  const rootProps = (0, _useGridRootProps.useGridRootProps)();
  const apiRef = (0, _useGridApiContext.useGridApiContext)();
  const isPivotPanelOpen = (0, _xDataGridPro.useGridSelector)(apiRef, _internals.gridPivotPanelOpenSelector);
  const openPivotSettings = event => {
    onClick(event);
    apiRef.current.setPivotPanelOpen(true);
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(rootProps.slots.baseMenuItem, {
    onClick: openPivotSettings,
    iconStart: /*#__PURE__*/(0, _jsxRuntime.jsx)(rootProps.slots.pivotIcon, {
      fontSize: "small"
    }),
    disabled: isPivotPanelOpen,
    children: apiRef.current.getLocaleText('columnMenuManagePivot')
  });
}