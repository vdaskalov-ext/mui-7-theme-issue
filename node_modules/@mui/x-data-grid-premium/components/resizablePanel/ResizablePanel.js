"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ResizablePanel = ResizablePanel;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var React = _interopRequireWildcard(require("react"));
var _clsx = _interopRequireDefault(require("clsx"));
var _system = require("@mui/system");
var _xDataGridPro = require("@mui/x-data-grid-pro");
var _composeClasses = _interopRequireDefault(require("@mui/utils/composeClasses"));
var _ResizablePanelContext = require("./ResizablePanelContext");
var _useGridRootProps = require("../../hooks/utils/useGridRootProps");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["className", "children", "direction"];
const useUtilityClasses = ownerState => {
  const {
    classes
  } = ownerState;
  const slots = {
    root: ['resizablePanel']
  };
  return (0, _composeClasses.default)(slots, _xDataGridPro.getDataGridUtilityClass, classes);
};
const ResizablePanelRoot = (0, _system.styled)('div', {
  name: 'MuiDataGrid',
  slot: 'ResizablePanel'
})({
  position: 'relative'
});
function ResizablePanel(props) {
  const {
      className,
      children,
      direction = 'horizontal'
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const rootProps = (0, _useGridRootProps.useGridRootProps)();
  const classes = useUtilityClasses(rootProps);
  const ref = React.useRef(null);
  const contextValue = React.useMemo(() => ({
    rootRef: ref,
    direction
  }), [direction]);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_ResizablePanelContext.ResizablePanelContext.Provider, {
    value: contextValue,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(ResizablePanelRoot, (0, _extends2.default)({
      className: (0, _clsx.default)(classes.root, className),
      ownerState: rootProps
    }, other, {
      ref: ref,
      children: children
    }))
  });
}