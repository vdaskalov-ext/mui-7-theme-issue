"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GridAggregationRowOverlay = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var React = _interopRequireWildcard(require("react"));
var _forwardRef = require("@mui/x-internals/forwardRef");
var _composeClasses = _interopRequireDefault(require("@mui/utils/composeClasses"));
var _xDataGridPro = require("@mui/x-data-grid-pro");
var _internals = require("@mui/x-data-grid-pro/internals");
var _useGridApiContext = require("../hooks/utils/useGridApiContext");
var _gridAggregationSelectors = require("../hooks/features/aggregation/gridAggregationSelectors");
var _jsxRuntime = require("react/jsx-runtime");
const useUtilityClasses = ownerState => {
  const {
    classes
  } = ownerState;
  const slots = {
    root: ['aggregationRowOverlayWrapper']
  };
  return (0, _composeClasses.default)(slots, _xDataGridPro.getDataGridUtilityClass, classes);
};
const GridAggregationRowOverlay = exports.GridAggregationRowOverlay = (0, _forwardRef.forwardRef)(function GridAggregationRowOverlay(props, forwardedRef) {
  const apiRef = (0, _useGridApiContext.useGridApiContext)();
  const rootProps = (0, _xDataGridPro.useGridRootProps)();
  const classes = useUtilityClasses({
    classes: rootProps.classes
  });
  const aggregationModel = (0, _internals.useGridSelector)(apiRef, _gridAggregationSelectors.gridAggregationModelSelector);
  const visibleColumns = new Set(Object.keys(aggregationModel));
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", {
    className: classes.root,
    children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_internals.GridSkeletonLoadingOverlayInner, (0, _extends2.default)({}, props, {
      skeletonRowsCount: 1,
      visibleColumns: visibleColumns,
      showFirstRowBorder: true,
      ref: forwardedRef
    }))
  });
});
if (process.env.NODE_ENV !== "production") GridAggregationRowOverlay.displayName = "GridAggregationRowOverlay";