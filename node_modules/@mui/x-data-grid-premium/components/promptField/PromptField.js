"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PromptField = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _useComponentRenderer = require("@mui/x-internals/useComponentRenderer");
var _forwardRef = require("@mui/x-internals/forwardRef");
var _PromptFieldContext = require("./PromptFieldContext");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["render", "className", "lang", "onRecordError", "onSubmit"];
/**
 * The top level Prompt Field component that provides context to child components.
 * It renders a `<div />` element.
 *
 * Demos:
 *
 * - [Prompt Field](https://mui.com/x/react-data-grid/components/prompt-field/)
 *
 * API:
 *
 * - [PromptField API](https://mui.com/x/api/data-grid/prompt-field/)
 */
const PromptField = exports.PromptField = (0, _forwardRef.forwardRef)(function PromptField(props, ref) {
  const {
      render,
      className,
      lang,
      onRecordError,
      onSubmit
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const [value, setValue] = React.useState('');
  const [recording, setRecording] = React.useState(false);
  const [disabled, setDisabled] = React.useState(false);
  const state = React.useMemo(() => ({
    value,
    recording,
    disabled
  }), [value, recording, disabled]);
  const resolvedClassName = typeof className === 'function' ? className(state) : className;
  const handleOnSubmit = React.useCallback(async prompt => {
    setDisabled(true);
    setValue('');
    await onSubmit(prompt);
    setDisabled(false);
  }, [onSubmit]);
  const contextValue = React.useMemo(() => ({
    state,
    lang,
    onValueChange: setValue,
    onRecordingChange: setRecording,
    onSubmit: handleOnSubmit,
    onError: onRecordError
  }), [state, lang, onRecordError, handleOnSubmit]);
  const element = (0, _useComponentRenderer.useComponentRenderer)('div', render, (0, _extends2.default)({
    className: resolvedClassName
  }, other, {
    ref
  }), state);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(_PromptFieldContext.PromptFieldContext.Provider, {
    value: contextValue,
    children: element
  });
});
if (process.env.NODE_ENV !== "production") PromptField.displayName = "PromptField";
process.env.NODE_ENV !== "production" ? PromptField.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  className: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string]),
  /**
   * Called when an speech recognition error occurs.
   * @param {string} error The error message
   */
  onRecordError: _propTypes.default.func,
  /**
   * Called when the user submits the prompt.
   * @param {string} prompt The prompt
   */
  onSubmit: _propTypes.default.func.isRequired,
  /**
   * A function to customize rendering of the component.
   */
  render: _propTypes.default.oneOfType([_propTypes.default.element, _propTypes.default.func])
} : void 0;