"use strict";
'use client';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault").default;
var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard").default;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DateRangePickerToolbar = void 0;
var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));
var _objectWithoutPropertiesLoose2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutPropertiesLoose"));
var React = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _clsx = _interopRequireDefault(require("clsx"));
var _Typography = _interopRequireDefault(require("@mui/material/Typography"));
var _styles = require("@mui/material/styles");
var _composeClasses = _interopRequireDefault(require("@mui/utils/composeClasses"));
var _internals = require("@mui/x-date-pickers/internals");
var _hooks = require("@mui/x-date-pickers/hooks");
var _dateRangePickerToolbarClasses = require("./dateRangePickerToolbarClasses");
var _hooks2 = require("../hooks");
var _jsxRuntime = require("react/jsx-runtime");
const _excluded = ["toolbarFormat", "className", "classes"];
const useUtilityClasses = classes => {
  const slots = {
    root: ['root'],
    container: ['container']
  };
  return (0, _composeClasses.default)(slots, _dateRangePickerToolbarClasses.getDateRangePickerToolbarUtilityClass, classes);
};
const DateRangePickerToolbarRoot = (0, _styles.styled)(_internals.PickersToolbar, {
  name: 'MuiDateRangePickerToolbar',
  slot: 'Root'
})({});
const DateRangePickerToolbarContainer = (0, _styles.styled)('div', {
  name: 'MuiDateRangePickerToolbar',
  slot: 'Container'
})({
  display: 'flex'
});
/**
 * Demos:
 *
 * - [DateRangePicker](https://mui.com/x/react-date-pickers/date-range-picker/)
 * - [Custom components](https://mui.com/x/react-date-pickers/custom-components/)
 *
 * API:
 *
 * - [DateRangePickerToolbar API](https://mui.com/x/api/date-pickers/date-range-picker-toolbar/)
 */
const DateRangePickerToolbar = exports.DateRangePickerToolbar = /*#__PURE__*/React.forwardRef(function DateRangePickerToolbar(inProps, ref) {
  const adapter = (0, _hooks.usePickerAdapter)();
  const props = (0, _styles.useThemeProps)({
    props: inProps,
    name: 'MuiDateRangePickerToolbar'
  });
  const {
      toolbarFormat: toolbarFormatProp,
      className,
      classes: classesProp
    } = props,
    other = (0, _objectWithoutPropertiesLoose2.default)(props, _excluded);
  const {
    value
  } = (0, _hooks.usePickerContext)();
  const translations = (0, _hooks.usePickerTranslations)();
  const ownerState = (0, _internals.useToolbarOwnerState)();
  const {
    rangePosition,
    setRangePosition
  } = (0, _hooks2.usePickerRangePositionContext)();
  const classes = useUtilityClasses(classesProp);

  // This can't be a default value when spreading because it breaks the API generation.
  const toolbarFormat = toolbarFormatProp ?? adapter.formats.shortDate;
  const formatDate = (date, fallback) => {
    if (!adapter.isValid(date)) {
      return fallback;
    }
    return adapter.formatByString(date, toolbarFormat);
  };
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(DateRangePickerToolbarRoot, (0, _extends2.default)({}, other, {
    toolbarTitle: translations.dateRangePickerToolbarTitle,
    className: (0, _clsx.default)(classes.root, className),
    ownerState: ownerState,
    ref: ref,
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(DateRangePickerToolbarContainer, {
      className: classes.container,
      children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_internals.PickersToolbarButton, {
        variant: value[0] == null ? 'h6' : 'h5',
        value: formatDate(value[0], translations.start),
        selected: rangePosition === 'start',
        onClick: () => setRangePosition('start')
      }), /*#__PURE__*/(0, _jsxRuntime.jsxs)(_Typography.default, {
        variant: "h5",
        children: ["\xA0", '–', "\xA0"]
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_internals.PickersToolbarButton, {
        variant: value[1] == null ? 'h6' : 'h5',
        value: formatDate(value[1], translations.end),
        selected: rangePosition === 'end',
        onClick: () => setRangePosition('end')
      })]
    })
  }));
});
if (process.env.NODE_ENV !== "production") DateRangePickerToolbar.displayName = "DateRangePickerToolbar";
process.env.NODE_ENV !== "production" ? DateRangePickerToolbar.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: _propTypes.default.object,
  className: _propTypes.default.string,
  /**
   * If `true`, show the toolbar even in desktop mode.
   * @default `true` for Desktop, `false` for Mobile.
   */
  hidden: _propTypes.default.bool,
  /**
   * The system prop that allows defining system overrides as well as additional CSS styles.
   */
  sx: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.object, _propTypes.default.bool])), _propTypes.default.func, _propTypes.default.object]),
  titleId: _propTypes.default.string,
  /**
   * Toolbar date format.
   */
  toolbarFormat: _propTypes.default.string,
  /**
   * Toolbar value placeholder—it is displayed when the value is empty.
   * @default "––"
   */
  toolbarPlaceholder: _propTypes.default.node
} : void 0;