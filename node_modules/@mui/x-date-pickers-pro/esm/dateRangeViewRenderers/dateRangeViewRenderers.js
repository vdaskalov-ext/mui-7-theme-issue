import * as React from 'react';
import { isDatePickerView } from '@mui/x-date-pickers/internals';
import { DateRangeCalendar } from "../DateRangeCalendar/index.js";
import { jsx as _jsx } from "react/jsx-runtime";
/**
 * We don't pass all the props down to `DateRangeCalendar`,
 * because otherwise some unwanted props would be passed to the HTML element.
 */
export const renderDateRangeViewCalendar = ({
  views,
  view,
  onViewChange,
  focusedView,
  onFocusedViewChange,
  value,
  defaultValue,
  referenceDate,
  onChange,
  className,
  classes,
  disableFuture,
  disablePast,
  minDate,
  maxDate,
  shouldDisableDate,
  reduceAnimations,
  onMonthChange,
  calendars,
  currentMonthCalendarPosition,
  slots,
  slotProps,
  loading,
  renderLoading,
  disableHighlightToday,
  readOnly,
  disabled,
  showDaysOutsideCurrentMonth,
  dayOfWeekFormatter,
  disableAutoMonthSwitching,
  sx,
  autoFocus,
  fixedWeekNumber,
  disableDragEditing,
  displayWeekNumber,
  timezone,
  availableRangePositions
}) => /*#__PURE__*/_jsx(DateRangeCalendar, {
  view: view,
  views: views,
  onViewChange: onViewChange,
  focusedView: focusedView && isDatePickerView(focusedView) ? focusedView : null,
  onFocusedViewChange: onFocusedViewChange,
  value: value,
  defaultValue: defaultValue,
  referenceDate: referenceDate,
  onChange: onChange,
  className: className,
  classes: classes,
  disableFuture: disableFuture,
  disablePast: disablePast,
  minDate: minDate,
  maxDate: maxDate,
  shouldDisableDate: shouldDisableDate,
  reduceAnimations: reduceAnimations,
  onMonthChange: onMonthChange,
  calendars: calendars,
  currentMonthCalendarPosition: currentMonthCalendarPosition,
  slots: slots,
  slotProps: slotProps,
  loading: loading,
  renderLoading: renderLoading,
  disableHighlightToday: disableHighlightToday,
  readOnly: readOnly,
  disabled: disabled,
  showDaysOutsideCurrentMonth: showDaysOutsideCurrentMonth,
  dayOfWeekFormatter: dayOfWeekFormatter,
  disableAutoMonthSwitching: disableAutoMonthSwitching,
  sx: sx,
  autoFocus: autoFocus,
  fixedWeekNumber: fixedWeekNumber,
  disableDragEditing: disableDragEditing,
  displayWeekNumber: displayWeekNumber,
  timezone: timezone,
  availableRangePositions: availableRangePositions
});
if (process.env.NODE_ENV !== "production") renderDateRangeViewCalendar.displayName = "renderDateRangeViewCalendar";